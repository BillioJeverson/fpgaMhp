/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip,
    output reg sum,
    output reg cout,
    output reg sum2,
    output reg cout2,
    input failsum,
    input failcout
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [1-1:0] M_myfsm_a;
  wire [1-1:0] M_myfsm_b;
  wire [1-1:0] M_myfsm_ab;
  wire [1-1:0] M_myfsm_cin;
  wire [1-1:0] M_myfsm_ac;
  wire [1-1:0] M_myfsm_bc;
  wire [1-1:0] M_myfsm_abc;
  wire [1-1:0] M_myfsm_blink;
  reg [1-1:0] M_myfsm_center;
  reg [1-1:0] M_myfsm_failsum;
  reg [1-1:0] M_myfsm_failcout;
  myFSM_2 myfsm (
    .clk(clk),
    .rst(rst),
    .center(M_myfsm_center),
    .failsum(M_myfsm_failsum),
    .failcout(M_myfsm_failcout),
    .a(M_myfsm_a),
    .b(M_myfsm_b),
    .ab(M_myfsm_ab),
    .cin(M_myfsm_cin),
    .ac(M_myfsm_ac),
    .bc(M_myfsm_bc),
    .abc(M_myfsm_abc),
    .blink(M_myfsm_blink)
  );
  
  always @* begin
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'hf;
    M_myfsm_center = io_button[1+0-:1];
    M_myfsm_failsum = ~failsum;
    M_myfsm_failcout = ~failcout;
    io_led[0+0+0-:1] = io_dip[0+0+0-:1];
    io_led[0+1+0-:1] = io_dip[0+1+0-:1];
    io_led[0+2+0-:1] = io_dip[0+2+0-:1];
    sum = !io_dip[0+0+0-:1] * !io_dip[0+1+0-:1] * io_dip[0+2+0-:1] + !io_dip[0+0+0-:1] * io_dip[0+1+0-:1] * !io_dip[0+2+0-:1] + io_dip[0+0+0-:1] * !io_dip[0+1+0-:1] * !io_dip[0+2+0-:1] + io_dip[0+0+0-:1] * io_dip[0+1+0-:1] * io_dip[0+2+0-:1];
    cout = !io_dip[0+0+0-:1] * io_dip[0+1+0-:1] * io_dip[0+2+0-:1] + io_dip[0+0+0-:1] * !io_dip[0+1+0-:1] * io_dip[0+2+0-:1] + io_dip[0+0+0-:1] * io_dip[0+1+0-:1] * !io_dip[0+2+0-:1] + io_dip[0+0+0-:1] * io_dip[0+1+0-:1] * io_dip[0+2+0-:1];
    io_led[8+0+0-:1] = !io_dip[0+0+0-:1] * !io_dip[0+1+0-:1] * io_dip[0+2+0-:1] + !io_dip[0+0+0-:1] * io_dip[0+1+0-:1] * !io_dip[0+2+0-:1] + io_dip[0+0+0-:1] * !io_dip[0+1+0-:1] * !io_dip[0+2+0-:1] + io_dip[0+0+0-:1] * io_dip[0+1+0-:1] * io_dip[0+2+0-:1];
    io_led[16+0+0-:1] = !io_dip[0+0+0-:1] * io_dip[0+1+0-:1] * io_dip[0+2+0-:1] + io_dip[0+0+0-:1] * !io_dip[0+1+0-:1] * io_dip[0+2+0-:1] + io_dip[0+0+0-:1] * io_dip[0+1+0-:1] * !io_dip[0+2+0-:1] + io_dip[0+0+0-:1] * io_dip[0+1+0-:1] * io_dip[0+2+0-:1];
    sum2 = M_myfsm_cin + M_myfsm_b + M_myfsm_a + M_myfsm_abc;
    cout2 = M_myfsm_bc + M_myfsm_ac + M_myfsm_ab + M_myfsm_abc;
    if (M_myfsm_a) begin
      io_led[0+7+0-:1] = M_myfsm_a;
    end else begin
      if (M_myfsm_b) begin
        io_led[0+6+0-:1] = M_myfsm_b;
      end else begin
        if (M_myfsm_ab) begin
          io_led[0+6+0-:1] = {2'h2{M_myfsm_ab}};
        end else begin
          if (M_myfsm_cin) begin
            io_led[0+5+0-:1] = M_myfsm_cin;
          end else begin
            if (M_myfsm_ac) begin
              io_led[0+7+0-:1] = M_myfsm_ac;
              io_led[0+5+0-:1] = M_myfsm_ac;
            end else begin
              if (M_myfsm_bc) begin
                io_led[0+5+0-:1] = {2'h2{M_myfsm_bc}};
              end else begin
                if (M_myfsm_abc) begin
                  io_led[0+5+0-:1] = {2'h3{M_myfsm_abc}};
                end
              end
            end
          end
        end
      end
    end
    io_led[8+7+0-:1] = M_myfsm_cin + M_myfsm_b + M_myfsm_a + M_myfsm_abc;
    io_led[16+7+0-:1] = M_myfsm_bc + M_myfsm_ac + M_myfsm_ab + M_myfsm_abc;
    io_led[8+4+0-:1] = M_myfsm_blink;
  end
endmodule
