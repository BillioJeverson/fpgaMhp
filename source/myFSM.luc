module myFSM (
    input clk,  // clock
    input rst,  // reset
    input center, // center button
    input failsum, // the input
    input failcout,
    output a,
    output b,
    output ab,
    output cin,
    output ac,
    output bc,
    output abc,
    output blink

  ) {
  
  
  .clk(clk) {
    .rst(rst) {
      fsm state = {IDLE, TEST, A, B, AB, CIN, AC, BC, ABC, FAILED};
    }
  }dff counter[24](.clk(clk),.rst(rst)); // 24 bits flip-flop name counter

  always {
    a = 0;
    b = 0;
    ab = 0;
    cin = 0;
    ac = 0;
    bc = 0;
    abc = 0;
    blink = 0;
    
    case (state.q){
      state.IDLE:
        counter.d = 0;
        if (center){
          state.d = state.TEST;
        }

      state.FAILED:
        counter.d = counter.q + 1;
        blink = counter.q[23]; // most significant bit of counter.q
        if (center){
          state.d = state.TEST;
        }
      
      state.TEST:
        counter.d = counter.q + 1;
        if (counter.q[23]){
          counter.d = 0;
          state.d = state.A;
          a = 1;
          b = 0;
          ab = 0;
          cin = 0;
          ac = 0;
          bc = 0;
          abc = 0;
        }
      state.A:
        counter.d = counter.q + 1;
        if (failsum){        
          state.d = state.FAILED;
        }
        if (counter.q[23]){
          counter.d = 0;
          state.d = state.B;
          a = 0;
          b = 1;
          ab = 0;
          cin = 0;
          ac = 0;
          bc = 0;
          abc = 0;
        }
      state.B:
        counter.d = counter.q + 1;
        if (failsum){
          state.d = state.FAILED;
        }
        if (counter.q[23]){
          counter.d = 0;
          state.d = state.AB;
          a = 0;
          b = 0;
          ab = 1;
          cin = 0;
          ac = 0;
          bc = 0;
          abc = 0;
        }
      state.AB:
        counter.d = counter.q + 1;
        if (failcout){
          state.d = state.FAILED;
        }
        if (counter.q[23]){
          counter.d = 0;
          state.d = state.CIN;
          a = 0;
          b = 0;
          ab = 0;
          cin = 1;
          ac = 0;
          bc = 0;
          abc = 0;
        }
      state.CIN:
        counter.d = counter.q + 1;
        if (failsum){
          state.d = state.FAILED;
        }
        if (counter.q[23]){
          counter.d = 0;
          state.d = state.AC;
          a = 0;
          b = 0;
          ab = 0;
          cin = 0;
          ac = 1;
          bc = 0;
          abc = 0;
        }
      state.AC:
        counter.d = counter.q + 1;
        if (failcout){
          state.d = state.FAILED;
        }
        if (counter.q[23]){
          counter.d = 0;
          state.d = state.BC;
          a = 0;
          b = 0;
          ab = 0;
          cin = 0;
          ac = 0;
          bc = 1;
          abc = 0;
        }
      state.BC:
        counter.d = counter.q + 1;
        if (failcout){
          state.d = state.FAILED;
        }
        if (counter.q[23]){
          counter.d = 0;
          state.d = state.ABC;
          a = 0;
          b = 0;
          ab = 0;
          cin = 0;
          ac = 0;
          bc = 0;
          abc = 1;
        }
      state.ABC:
        counter.d = counter.q + 1;
        if (counter.q[23]){
          counter.d = 0;
          state.d = state.IDLE;
          a = 0;
          b = 0;
          ab = 0;
          cin = 0;
          ac = 0;
          bc = 0;
          abc = 0;
        }
            
        
    }
  }
}
